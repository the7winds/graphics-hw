cmake_minimum_required(VERSION 3.5)

# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)

# Add the configurations from nanogui
add_subdirectory(nanogui)

# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

# On top of adding the path to nanogui/include, you may need extras
include_directories(nanogui/include)
include_directories(nanogui/ext/glfw/include)
include_directories(nanogui/ext/nanovg/src)
include_directories(nanogui/ext/eigen)

file(GLOB APP_SOURCES src/*.cpp)

MESSAGE(${APP_SOURCES})

include_directories(include)

set(CMAKE_CXX_FLAGS "-std=c++11 -O0 -Wall -Wextra -g")

# Compile a target using NanoGUI
add_executable(app ${APP_SOURCES})

# Lastly, additional libraries may have been built for you.  In addition to linking
# against NanoGUI, we need to link against those as well.
target_link_libraries(app nanogui ${NANOGUI_EXTRA_LIBS})

find_package(Boost COMPONENTS system filesystem REQUIRED)

target_link_libraries(app  ${Boost_FILESYSTEM_LIBRARY}  ${Boost_SYSTEM_LIBRARY})